---
# SPDX-FileCopyrightText: 2025 Akira Komamura
# SPDX-License-Identifier: CC-BY-SA-4.0
title: Adding a Nix-based environment for OCaml
description: This document describes how to add a Nix-based development environment for OCaml, using ocaml-basic template from github:akirak/flake-templates.
---

In this tutorial, you will learn how to set up a basic development environment
for OCaml. Unlike the [ocaml-dune
template](/flake-templates/recipes/ocaml/generic-dune), this approach is
designed to help you explore an existing OCaml codebase. In this setup,
ocaml-lsp provides useful hints on type information and navigation. It is easier
to set up than the other template, and it should work whether or not the project
uses dune.

{% aside type="note" %}

This document won't explain how to initialize a new OCaml project without Dune,
because generally Dune is the way, and other paths would be either
project-specific or trivial. For starting a new project, follow [the instruction
with ocaml-dune template](/flake-templates/recipes/ocaml/generic-dune).

{% /aside %}

## Add flake.nix to the project

{% steps %}

1. Initialize the template from the root directory of the project:

   ```shell
   nix flake init -t github:akirak/flake-templates#ocaml-basic
   ```

   Open `flake.nix` and review the packages under the default development shell.
   It contains comments for optional dependencies such as `ocamlbuild`, GNU
   Make, and gdb. Depending on the project, you might want to enable some of
   them.

2. Add `.envrc`:

   ```shell title=".envrc"
   use flake
   ```

3. Allow direnv:

   ```shell
   direnv allow
   ```

{% /steps %}

## Developing

The template is basic and intended for existing projects. For development,
follow instructions specific to your project.
